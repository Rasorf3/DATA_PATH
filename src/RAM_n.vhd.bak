----------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all; 
----------------------------------------------------------------------------
entity RAM_n is	
	generic(
		Dwidth : integer := 10;
		Awidth : integer := 10
	);
	port(
	Clock		: in   std_logic; 
	WriteData	: in   std_logic_vector(Dwidth - 1 downto 0);	
	ReadData	: out  std_logic_vector(Dwidth - 1 downto 0);
	Address	: in   std_logic_vector(Awidth - 1 downto 0);
	WriteEnable	: in   std_logic 				
	);
end entity RAM_n ;
----------------------------------------------------------------------------
architecture rtl of RAM_n is
	-- Build a 2D array type for the RAM
	type memory_t is array(0 to 2**Awidth -1 ) of 
	std_logic_vector((Dwidth-1) downto 0);
	-- Declare the RAM signal
	 signal MyRam : memory_t ;
begin
	RAMProcess : process (Clock) begin
            if rising_edge(Clock) then
                if WriteEnable = '1'  then
                    MyRam (to_integer(unsigned(Address))) <= WriteData;
                end if;    
                ReadData <= MyRam(to_integer(unsigned(Address)));    
            end if;
    	 end process;
end rtl;
-----------------------------------------------------------------------------
